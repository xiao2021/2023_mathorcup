在使用QUBO方法建模时，可能会遇到一些难点，我们遇到的一些的难点包括：

问题复杂度：QUBO方法通常适用于NP难问题，这些问题的复杂度非常高，因此建模本身可能会很困难。为了解决这些问题，可能需要花费大量的时间来设计适当的变量和约束条件。

变量数目：QUBO方法的求解时间和空间复杂度随着变量数目的增加而呈指数级增长。因此，在建模时需要考虑变量数目的限制，并尽可能减少变量数目。我们的模型，在本题中第一问变量数仅为110个，第二问中变量数为1000个，第三问中变量数达到了惊人的1000×1000000个，这可能是因为我们的模型建立的不是很好。

目标函数形式：QUBO方法要求目标函数必须是一个二次型，这可能会限制建模的自由度。有时，需要使用一些技巧将非二次型的目标函数转化为二次型。我们在求解第二问时，发现出现了三次变量，这是显然无法使用qubo方法求解的，我们在想如何转化为二次型。对于qubo模型，一次型也是可以看作二次型，这样，我们通过把问题展开，赋予更多的二元变量，即可到达降低次数的目的，但是显然，这样会增加变量数，从而增加运算时间，我们猜测，如果能将问题直接建模为二次型，就不要先降为一次型而后看作二次型。

约束条件：在QUBO模型中，约束条件通常是通过惩罚项的方式添加到目标函数中的。但是，这可能会导致一些问题的求解变得更加困难，因为它们引入了一些复杂性和噪声。在建模时，需要仔细设计约束条件，以确保它们不会过度影响求解的结果。

求解器的选择：QUBO方法的求解器有很多，每个求解器都有其独特的优缺点。在选择求解器时，需要考虑问题的性质、求解器的性能和可用资源等因素，并进行适当的权衡。我们使用的求解器为经典计算机，显然，经典计算机跑这个模型，特别是第三问的时候是非常吃力的，这说明经典计算机在求解qubo模型是不讨好的，用一般方法可能也会比qubo方法更快，所以，qubo方法只钟情于量子计算机。
